{"version":3,"sources":["screens/Task/ScreensAddTask.tsx","components/Footer/index.tsx","components/Popup/index.tsx","initialData.ts","api/index.ts","recoil/atoms.ts","utilities/dateHandlers.ts","components/Task/index.tsx","components/Column/index.tsx","components/DroppableList/index.tsx","recoil/selectors.ts","components/MultipleTagSelect/index.tsx","screens/Task/ScreensEditTask.tsx","screens/Dailies/ScreensEditDaily.tsx","screens/Home/index.tsx","screens/Dailies/index.tsx","screens/Tags/ScreensEditTag.tsx","screens/Tags/index.tsx","screens/Config/index.tsx","components/Transition/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["TaskEditableAttributes","getFooterItemIcon","num","selected","color","width","height","viewBox","fill","xmlns","cx","cy","r","d","stroke","strokeWidth","y","rx","items","icon","title","FooterItem","setSelected","className","onClick","Footer","setPopupScreen","map","item","index","Popup","isFullscreen","shown","children","closeEvent","initialData","tasks","columns","id","taskIds","checked","columnOrder","initialDaySettings","tags","tagName","tagColor","initialTask","description","dailyTask","initialDaily","loadTasks","JSON","parse","localStorage","getItem","length","saveTasks","setItem","stringify","loadDailies","dailies","undefined","saveDailies","loadTags","tagsState","atom","key","default","tasksState","homeTasksState","dailiesState","dateState","Date","themeState","days","months","prettyDate","date","dayFormatted","getDayFormatted","year","getFullYear","monthName","getMonthName","day","getDate","getWeekday","getDay","getMonth","Task","task","columnId","updateChecked","showDeleteBtn","deleteEventHandler","hasBigTag","useState","isDone","setIsDone","useRecoilValue","useEffect","includes","handleInputChange","event","check","target","getTimeStatusColor","taskDate","tdate","date4","getTime","draggableId","provided","snapshot","isDragging","draggableProps","dragHandleProps","ref","innerRef","type","onChange","style","backgroundColor","time","hidden","tag","Column","column","showTitle","hasEmptyString","droppableId","String","isDraggingOver","droppableProps","placeholder","DroppableList","rerender","data","setData","state","setState","isOverflow","setIsOverflow","divRef","useRef","current","wrapper","taskColumn","offsetHeight","reduce","a","b","newColumns","filter","col","newColumn","find","oldChecked","newChecked","Set","splice","indexOf","nColumn","newState","onDragEnd","result","destination","source","newTaskIds","split","taskId","tagTasksState","selector","get","tagTasks","objectColumns","forEach","todoColumn","dailiesSelectorState","ntasksList","t","ntasks","console","log","loadNewDailyTask","force","weekday","utilities","toLowerCase","filteredTasks","taskCol","tasksSelectorState","dateKey","curTasks","tasksChecked","TagSelect","selectTagHandler","tagRef","MultipleTagSelect","setTags","newTags","ScreensAddTask","checkTime","setCheckTime","isDailyTask","setIsDailyTask","setTask","useRecoilState","setTasks","setDailies","tagsSelected","setTagsSelected","setDays","updateEventHandler","value","attribute","uuidv4","closePopup","Array","from","document","querySelectorAll","btn","click","checkValidTask","TAGS","DAILYTASK","htmlFor","name","TITLE","DESCRIPTION","TIME","ntaskList","ncolumn","i","push","ndailies","ScreensEditTask","updateEventHandlerRef","tg","ntask","ScreensHome","setRerender","refreshPopup","setRefreshPopup","smallPopup","setSmallPopup","popup","setPopup","setDate","selectedTask","setSelectedTask","setTaskCol","tasksSelector","todayRef","compareDiffRef","nTaskCol","d1","d2","sort","setTasksRef","dailyTasks","ndailyTasks","compareDaily","addDate","ndate","_","ScreensEditDaily","dailiesSelector","checkedDays","ndays","nColumns","ScreensDailies","dateRef","fillRule","clipRule","ncolumns","ScreensEditTag","setTag","getElementById","ntag","readOnly","ncolor","handleColorChange","setTimeout","ntags","ScreensTags","tagnameRef","Math","floor","random","setColor","selectedTag","setSelectedTag","setColumnId","saveTags","ScreensConfig","darkmode","setDarkmode","useSetRecoilState","setTheme","removeItem","Transition","setShown","timer","clearTimeout","App","transition","setTransition","popupScreen","transitionRef","selectedOldRef","openPopupScreen","setSelectedHandler","hiddenScreen","popupScreenTitles","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e20fee6d.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { IColumn, ITagSettings, ITask } from \"../../types\";\nimport MultipleTagSelect from \"../../components/MultipleTagSelect\";\nimport \"./index.css\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { tagsState, homeTasksState, dailiesState } from \"../../recoil/atoms\";\nimport { initialDaySettings, initialTask } from \"../../initialData\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { saveDailies } from \"../../api\";\n\nenum TaskEditableAttributes {\n  TITLE = \"title\",\n  DESCRIPTION = \"description\",\n  TIME = \"time\",\n  DAILYTASK = \"dailyTask\",\n  TAG = \"tag\",\n  TAGS = \"tags\",\n}\nconst ScreensAddTask: React.FC = () => {\n  const [checkTime, setCheckTime] = useState<boolean>(false);\n  const [isDailyTask, setIsDailyTask] = useState<boolean>(false);\n  const [task, setTask] = useState<ITask>(initialTask);\n  const tags = useRecoilValue(tagsState);\n  const [tasks, setTasks] = useRecoilState(homeTasksState);\n  const [dailies, setDailies] = useRecoilState(dailiesState);\n  const [tagsSelected, setTagsSelected] = useState<ITagSettings>({\n    tags: tags,\n    selected: [],\n  });\n  const [days, setDays] = useState(initialDaySettings);\n  const divRef = useRef<HTMLDivElement>(null);\n  const [isOverflow, setIsOverflow] = useState<boolean>(false);\n  const updateEventHandler = (\n    value: any,\n    attribute: TaskEditableAttributes\n  ) => {\n    setTask({ ...task, [attribute]: value });\n  };\n\n  useEffect(() => {\n    if (divRef.current != null) {\n      const wrapper: HTMLDivElement = divRef.current;\n      const height = [...wrapper.children]\n        .map((taskColumn) => {\n          const col = taskColumn as HTMLDivElement;\n          return col.offsetHeight;\n        })\n        .reduce((a: number, b: number) => a + b, 0);\n      if (height > wrapper.offsetHeight - 40) {\n        setIsOverflow(true);\n      } else {\n        setIsOverflow(false);\n      }\n    }\n  }, [divRef, checkTime, isDailyTask]);\n\n  useEffect(() => {\n    if (task.id === \"\") setTask({ ...task, id: uuidv4() });\n  }, [task]);\n\n  const closePopup = () => {\n    const buttons: HTMLButtonElement[] = Array.from(\n      document.querySelectorAll(\"button.closeBtn\")\n    ) as HTMLButtonElement[];\n    buttons.forEach((btn) => btn.click());\n  };\n\n  const checkValidTask = (task: ITask) => {\n    if (checkTime && task.time === undefined) return false;\n    return task.title !== \"\";\n  };\n\n  const addTask = () => {\n    if (isDailyTask) {\n      if (checkValidTask(task) && days.selected.length > 0) {\n        const ntaskList = [...dailies.tasks, task];\n        const ncolumn: IColumn[] = [];\n        for (let i = 0; i < dailies.columns.length; i++) {\n          const col: IColumn = JSON.parse(JSON.stringify(dailies.columns[i]));\n          if (days.selected.includes(col.id))\n            col.taskIds = [...col.taskIds, task.id];\n          ncolumn.push(col);\n        }\n        const ndailies = { ...dailies, columns: ncolumn, tasks: ntaskList };\n        setDailies(ndailies);\n        saveDailies(ndailies);\n        setTask(initialTask);\n        closePopup();\n        console.log(\"finished adding daily task\");\n        return;\n      }\n    } else if (checkValidTask(task)) {\n      const ncolumn: IColumn = {\n        ...tasks.columns[0],\n        taskIds: [...tasks.columns[0].taskIds, task.id],\n      };\n      const ntaskList = [...tasks.tasks, task];\n      const ntasks = { ...tasks, columns: [ncolumn], tasks: ntaskList };\n      setTasks(ntasks);\n      setTask(initialTask);\n      closePopup();\n      console.log(\"finished adding task\");\n      return;\n    }\n    console.log(\"nope\");\n  };\n  const handleInputChange = (\n    setState: (state: boolean) => void,\n    state: boolean\n  ) => {\n    setState(state);\n  };\n  useEffect(() => {\n    updateEventHandler(tagsSelected.selected, TaskEditableAttributes.TAGS);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tagsSelected.selected]);\n\n  useEffect(() => {\n    updateEventHandler(days.selected, TaskEditableAttributes.DAILYTASK);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [days.selected]);\n\n  return (\n    <>\n      <div className=\"task\">\n        <div\n          className={`taskSection ${isOverflow ? \"overflow\" : \"\"}`}\n          ref={divRef}\n        >\n          <div className=\"inputs\">\n            <label htmlFor=\"title\">Title</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={task.title}\n              onChange={(event) =>\n                updateEventHandler(\n                  event.target.value,\n                  TaskEditableAttributes.TITLE\n                )\n              }\n              placeholder=\"TITLE...\"\n            />\n            <label htmlFor=\"description\">Description</label>\n            <input\n              type=\"text\"\n              id=\"description\"\n              name=\"description\"\n              value={task.description}\n              onChange={(event) =>\n                updateEventHandler(\n                  event.target.value,\n                  TaskEditableAttributes.DESCRIPTION\n                )\n              }\n              placeholder=\"DESCRIPTION...\"\n            />\n          </div>\n          <div className=\"inputWrapper\">\n            <input\n              type=\"checkbox\"\n              name=\"checkTime\"\n              id=\"checkTime\"\n              checked={checkTime}\n              onChange={(event: any) =>\n                handleInputChange(setCheckTime, event.target.checked)\n              }\n            />\n            <label htmlFor=\"checkTime\">check time?</label>\n          </div>\n          <div hidden={!checkTime}>\n            <div className=\"inputs\">\n              <label htmlFor=\"time\">Time</label>\n              <input\n                type=\"time\"\n                id=\"time\"\n                name=\"time\"\n                value={task.time ?? \"\"}\n                onChange={(event) =>\n                  updateEventHandler(\n                    event.target.value,\n                    TaskEditableAttributes.TIME\n                  )\n                }\n              />\n              <svg\n                className=\"clock\"\n                width=\"23\"\n                height=\"23\"\n                viewBox=\"0 0 23 23\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M22 11.5C22 17.299 17.299 22 11.5 22C5.70101 22 1 17.299 1 11.5C1 5.70101 5.70101 1 11.5 1C17.299 1 22 5.70101 22 11.5Z\"\n                  fill=\"white\"\n                  stroke=\"#A4BAF7\"\n                  strokeWidth=\"2\"\n                />\n                <path\n                  d=\"M14.0556 14.0559C16.6112 16.6114 11.5001 11.5003 11.5001 11.5003C11.5001 9.45586 11.5001 1.27808 11.5001 6.38919\"\n                  stroke=\"#707070\"\n                />\n              </svg>\n            </div>\n          </div>\n          <div className=\"multipleSelectWrapper\">\n            <label>Tags</label>\n            <MultipleTagSelect tags={tagsSelected} setTags={setTagsSelected} />\n          </div>\n          <div className=\"inputWrapper\">\n            <input\n              type=\"checkbox\"\n              name=\"isDailyTask\"\n              id=\"isDailyTask\"\n              checked={isDailyTask}\n              onChange={(event: any) =>\n                handleInputChange(setIsDailyTask, event.target.checked)\n              }\n            />\n            <label htmlFor=\"isDailyTask\">is a daily task?</label>\n          </div>\n          <div className=\"multipleSelectWrapper\" hidden={!isDailyTask}>\n            <MultipleTagSelect tags={days} setTags={setDays} />\n          </div>\n        </div>\n        <button className=\"btn center\" onClick={addTask}>\n          ADD TASK\n        </button>\n      </div>\n    </>\n  );\n};\nexport default ScreensAddTask;\n","import React from \"react\";\nimport \"./index.css\";\n\ninterface IFooterItem {\n  icon: number;\n  title: string;\n}\ntype FooterItemType = {\n  icon: number;\n  title: string;\n  selected: number;\n  setSelected: (num: number) => void;\n};\nconst getFooterItemIcon: React.FC<number> = (num, selected) => {\n  const color: string = selected === num ? \"#CB78E5\" : \"#C4C4C4\";\n  switch (num) {\n    case 0:\n      return (\n        <svg\n          width=\"25\"\n          height=\"25\"\n          viewBox=\"0 0 25 25\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <circle cx=\"12.5\" cy=\"12.5\" r=\"12.5\" fill={color} />\n          <path d=\"M18 9L12 17L7.5 13.5\" stroke=\"white\" strokeWidth=\"2\" />\n        </svg>\n      );\n    case 1:\n      return (\n        <svg\n          width=\"25\"\n          height=\"19\"\n          viewBox=\"0 0 25 19\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <rect y=\"1\" width=\"25\" height=\"18\" rx=\"3\" fill={color} />\n          <path d=\"M7 0V4.5\" stroke=\"#707070\" />\n          <path d=\"M18 0V4.5\" stroke=\"#707070\" />\n          <path d=\"M4 8.5H21\" stroke=\"white\" />\n          <path d=\"M12.5 4.5V0\" stroke=\"#707070\" />\n        </svg>\n      );\n    case 2:\n      return (\n        <svg\n          width=\"23\"\n          height=\"22\"\n          viewBox=\"0 0 23 22\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M20.0486 1.4757C20.0486 1.08432 19.8931 0.708972 19.6164 0.432224C19.3396 0.155475 18.9643 0 18.5729 0H11.8053C11.414 8.358e-05 11.0387 0.155614 10.762 0.432381L0.432055 10.7623C0.155403 11.039 -1.14441e-05 11.4143 -1.14441e-05 11.8056C-1.14441e-05 12.1969 0.155403 12.5722 0.432055 12.849L7.19963 19.6165C7.47637 19.8932 7.85165 20.0486 8.24295 20.0486C8.63426 20.0486 9.00954 19.8932 9.28628 19.6165L19.6162 9.2866C19.893 9.00992 20.0485 8.63463 20.0486 8.24328V1.4757ZM14.8836 7.37852C14.2965 7.37852 13.7335 7.14531 13.3184 6.73018C12.9033 6.31506 12.6701 5.75203 12.6701 5.16496C12.6701 4.57789 12.9033 4.01486 13.3184 3.59974C13.7335 3.18462 14.2965 2.95141 14.8836 2.95141C15.4707 2.95141 16.0337 3.18462 16.4488 3.59974C16.864 4.01486 17.0972 4.57789 17.0972 5.16496C17.0972 5.75203 16.864 6.31506 16.4488 6.73018C16.0337 7.14531 15.4707 7.37852 14.8836 7.37852Z\"\n            fill={color}\n          />\n          <path\n            d=\"M21.0919 10.0245C21.3687 9.74778 21.5242 9.37249 21.5243 8.98114V1.47571C21.9157 1.47571 22.291 1.63118 22.5678 1.90793C22.8445 2.18468 23 2.56003 23 2.95141V9.71899C22.9999 10.1103 22.8444 10.4856 22.5676 10.7623L12.2377 21.0922C11.961 21.3689 11.5857 21.5243 11.1944 21.5243C10.8031 21.5243 10.4278 21.3689 10.151 21.0922L10.0876 21.0288L21.0919 10.0245Z\"\n            fill={color}\n          />\n        </svg>\n      );\n    case 3:\n      return (\n        <svg\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M23.7032 10.1761L21.0205 9.37608C20.8351 8.72913 20.58 8.10415 20.2598 7.51208L21.5731 5.0561C21.6224 4.96339 21.6404 4.85729 21.6245 4.75352C21.6087 4.64976 21.5597 4.55388 21.485 4.4801L19.5711 2.56011C19.4973 2.48545 19.4013 2.43656 19.2974 2.42071C19.1936 2.40485 19.0874 2.42288 18.9946 2.47211L16.5522 3.7761C15.9537 3.44063 15.3199 3.17234 14.6623 2.97611L13.8615 0.328121C13.8277 0.230534 13.7637 0.146201 13.6788 0.0872595C13.5939 0.0283181 13.4924 -0.00219138 13.3891 0.000122534H10.6824C10.5785 0.000606191 10.4773 0.03423 10.3938 0.0961006C10.3103 0.157971 10.2487 0.24486 10.218 0.344121L9.4172 2.98411C8.75417 3.17929 8.11494 3.44761 7.51134 3.7841L5.10899 2.48811C5.0162 2.43888 4.90998 2.42085 4.80612 2.43671C4.70226 2.45256 4.60628 2.50145 4.53243 2.57611L2.58653 4.4721C2.51179 4.54588 2.46286 4.64176 2.44699 4.74552C2.43112 4.84928 2.44916 4.95539 2.49844 5.0481L3.79571 7.44809C3.45943 8.04856 3.19086 8.68444 2.99493 9.34408L0.344337 10.1441C0.244978 10.1747 0.158004 10.2363 0.0960724 10.3197C0.034141 10.4032 0.000484132 10.5042 0 10.6081V13.3121C0.000484132 13.4159 0.034141 13.517 0.0960724 13.6004C0.158004 13.6839 0.244978 13.7454 0.344337 13.7761L3.01094 14.576C3.20901 15.2247 3.47754 15.8497 3.81172 16.44L2.49844 18.952C2.44916 19.0447 2.43112 19.1508 2.44699 19.2546C2.46286 19.3584 2.51179 19.4542 2.58653 19.528L4.5004 21.44C4.57425 21.5147 4.67023 21.5636 4.77409 21.5794C4.87795 21.5953 4.98417 21.5772 5.07696 21.528L7.55138 20.208C8.13672 20.5236 8.75417 20.7757 9.39318 20.96L10.194 23.656C10.2246 23.7553 10.2862 23.8422 10.3698 23.904C10.4533 23.9659 10.5544 23.9995 10.6584 24H13.3651C13.469 23.9995 13.5702 23.9659 13.6537 23.904C13.7372 23.8422 13.7988 23.7553 13.8295 23.656L14.6303 20.952C15.2639 20.7667 15.8759 20.5146 16.4561 20.2L18.9465 21.528C19.0393 21.5772 19.1455 21.5953 19.2494 21.5794C19.3532 21.5636 19.4492 21.5147 19.5231 21.44L21.4369 19.528C21.5117 19.4542 21.5606 19.3584 21.5765 19.2546C21.5924 19.1508 21.5743 19.0447 21.525 18.952L20.1957 16.472C20.5139 15.8902 20.769 15.276 20.9565 14.64L23.6551 13.8401C23.7545 13.8094 23.8414 13.7479 23.9034 13.6644C23.9653 13.581 23.999 13.4799 23.9995 13.3761V10.6481C24.0042 10.5486 23.9783 10.45 23.9254 10.3657C23.8724 10.2813 23.7949 10.2151 23.7032 10.1761ZM12.0358 16.4C11.1647 16.4 10.3131 16.142 9.58886 15.6585C8.86458 15.175 8.30007 14.4879 7.96671 13.6839C7.63336 12.8799 7.54614 11.9952 7.71608 11.1417C7.88603 10.2882 8.30549 9.50416 8.92145 8.88881C9.5374 8.27346 10.3222 7.8544 11.1765 7.68463C12.0309 7.51485 12.9164 7.60199 13.7212 7.93501C14.526 8.26804 15.2139 8.83199 15.6978 9.55557C16.1818 10.2791 16.4401 11.1298 16.4401 12.0001C16.4401 13.167 15.976 14.2862 15.1501 15.1113C14.3241 15.9365 13.2039 16.4 12.0358 16.4Z\"\n            fill={color}\n          />\n        </svg>\n      );\n    default:\n      return <p>wat</p>;\n  }\n};\n\nconst items: IFooterItem[] = [\n  { icon: 0, title: \"Today's tasks\" },\n  { icon: 1, title: \"Dailies\" },\n  { icon: 2, title: \"Tags\" },\n  { icon: 3, title: \"Config\" },\n];\n\nconst FooterItem: React.FC<FooterItemType> = ({\n  icon,\n  title,\n  selected,\n  setSelected,\n}) => {\n  return (\n    <div\n      className=\"footerItem\"\n      onClick={() => {\n        if (selected !== icon) setSelected(icon);\n      }}\n    >\n      {getFooterItemIcon(icon, selected)}\n      <p className={selected === icon ? \"selected\" : \"\"}>{title}</p>\n    </div>\n  );\n};\n\ntype FooterType = {\n  selected: number;\n  setSelected: (num: number) => void;\n  setPopupScreen: (num: number) => void;\n};\nconst Footer: React.FC<FooterType> = ({\n  selected,\n  setSelected,\n  setPopupScreen,\n}) => {\n  return (\n    <div className=\"footer\">\n      <div>\n        {items.map((item: IFooterItem, index: number) => {\n          return (\n            <FooterItem\n              key={index}\n              icon={item.icon}\n              title={item.title}\n              selected={selected}\n              setSelected={setSelected}\n            />\n          );\n        })}\n      </div>\n      <button className=\"bigButton\" onClick={() => setPopupScreen(1)}>\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { ReactNode } from \"react\";\nimport \"./index.css\";\n\ntype PopupType = {\n  isFullscreen: boolean;\n  shown: boolean;\n  children: ReactNode;\n  closeEvent: () => void;\n  title?: string;\n};\nconst Popup: React.FC<PopupType> = ({\n  isFullscreen,\n  shown,\n  children,\n  closeEvent,\n  title,\n}) => {\n  const handleCloseEvent = () => {\n    if (!isFullscreen) closeEvent();\n  };\n  return (\n    <>\n      {isFullscreen ? (\n        <div className={`eventBlocker back ${shown ? \"shown\" : \"\"}`}></div>\n      ) : (\n        <></>\n      )}\n      <div\n        className={`popup ${shown ? \"shown\" : \"\"} ${\n          isFullscreen ? \"fullscreen\" : \"\"\n        }`}\n      >\n        <div\n          className={`eventBlocker ${shown ? \"shown\" : \"\"}`}\n          onClick={() => {\n            if (!isFullscreen) handleCloseEvent();\n          }}\n        ></div>\n        <button className=\"closeBtn\" onClick={closeEvent}>\n          <svg\n            width=\"26\"\n            height=\"22\"\n            viewBox=\"0 0 26 22\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M2 11H26M2 11L11 1M2 11L11 21\"\n              stroke=\"#F7DAF8\"\n              strokeWidth=\"2\"\n            />\n          </svg>\n        </button>\n        <h1 className=\"title\">{title ?? \"\"}</h1>\n        {children}\n      </div>\n    </>\n  );\n};\nexport default Popup;\n","import { ITodoColumn, ITag, ITagSettings, ITask } from \"./types\";\n\nexport const initialTag: ITag[] = [\n  { id: \"tagid0\", tagName: \"test tag1\", tagColor: \"tomato\" },\n  { id: \"tagid1\", tagName: \"test tag2\", tagColor: \"pink\" },\n  { id: \"tagid2\", tagName: \"test tag3\", tagColor: \"lightblue\" },\n  { id: \"tagid3\", tagName: \"test tag4\", tagColor: \"lightgreen\" },\n];\n\nexport const initialData: ITodoColumn = {\n  tasks: [],\n  columns: [\n    {\n      id: \"todo\",\n      title: \"To do\",\n      taskIds: [],\n      checked: [],\n    },\n  ],\n  columnOrder: [\"todo\"],\n};\n\nexport const initialDays: ITag[] = [\n  { id: \"monday\", tagName: \"Monday\", tagColor: \"#e39df9\" },\n  { id: \"tuesday\", tagName: \"Tuesday\", tagColor: \"#e39df9\" },\n  { id: \"wednesday\", tagName: \"Wednesday\", tagColor: \"#e39df9\" },\n  { id: \"thursday\", tagName: \"Thursday\", tagColor: \"#e39df9\" },\n  { id: \"friday\", tagName: \"Friday\", tagColor: \"#e39df9\" },\n  { id: \"saturday\", tagName: \"Saturday\", tagColor: \"#e39df9\" },\n  { id: \"sunday\", tagName: \"Sunday\", tagColor: \"#e39df9\" },\n];\nexport const initialDaySettings: ITagSettings = {\n  tags: initialDays,\n  selected: [],\n};\nexport const initialTask: ITask = {\n  id: \"\",\n  title: \"\",\n  description: \"\",\n  dailyTask: [],\n};\nexport const initialDaily: ITodoColumn = {\n  id: \"daily\",\n  tasks: [],\n  columns: [\n    {\n      id: \"monday\",\n      title: \"Monday\",\n      taskIds: [],\n    },\n    {\n      id: \"tuesday\",\n      title: \"Tuesday\",\n      taskIds: [],\n    },\n    {\n      id: \"wednesday\",\n      title: \"Wednesday\",\n      taskIds: [],\n    },\n    {\n      id: \"thursday\",\n      title: \"Thursday\",\n      taskIds: [],\n    },\n    {\n      id: \"friday\",\n      title: \"Friday\",\n      taskIds: [],\n    },\n    {\n      id: \"saturday\",\n      title: \"Saturday\",\n      taskIds: [],\n    },\n    {\n      id: \"sunday\",\n      title: \"Sunday\",\n      taskIds: [],\n    },\n  ],\n  columnOrder: [\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\",\n    \"sunday\",\n  ],\n};\n","import { initialDaily } from \"../initialData\";\nimport { ITag, ITodoColumn } from \"../types\";\n\nexport const loadTasks = () => {\n  const tasks: ITodoColumn[] = JSON.parse(\n    localStorage.getItem(\"djukip-tasks\") ?? \"[]\"\n  );\n  if (tasks.length === 0) return [];\n  return tasks;\n};\n\nexport const saveTasks = (tasks: ITodoColumn[]) => {\n  localStorage.setItem(\"djukip-tasks\", JSON.stringify(tasks));\n};\n\nexport const loadDailies = () => {\n  const dailies: ITodoColumn = JSON.parse(\n    localStorage.getItem(\"djukip-dailies\") ?? \"{}\"\n  );\n  if (dailies?.id === undefined) return initialDaily;\n  return dailies;\n};\n\nexport const saveDailies = (dailies: ITodoColumn) => {\n  localStorage.setItem(\"djukip-dailies\", JSON.stringify(dailies));\n};\n\nexport const loadTags = () => {\n  const tags: ITag[] = JSON.parse(localStorage.getItem(\"djukip-tags\") ?? \"[]\");\n  return tags;\n};\nexport const saveTags = (tags: ITag[]) => {\n  localStorage.setItem(\"djukip-tags\", JSON.stringify(tags));\n};\n","import { atom } from \"recoil\";\nimport { loadDailies, loadTags, loadTasks } from \"../api\";\nimport { initialData } from \"../initialData\";\n\nexport const tagsState = atom({\n  key: \"tagsState\",\n  default: loadTags(),\n});\n\nexport const tasksState = atom({\n  key: \"tasksState\",\n  default: loadTasks(),\n});\n\nexport const homeTasksState = atom({\n  key: \"homeTasksState\",\n  default: initialData,\n});\n\nexport const dailiesState = atom({\n  key: \"dailiesState\",\n  default: loadDailies(),\n});\n\nexport const dateState = atom({\n  key: \"dateState\",\n  default: new Date(),\n});\n\nexport const themeState = atom({\n  key: \"themeState\",\n  default: \"dark\",\n});\n","const days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\nexport const prettyDate = (date: Date): string => {\n  const dayFormatted = getDayFormatted(date);\n  const year = date.getFullYear();\n  const monthName = getMonthName(date);\n  const formatted = `${monthName} ${dayFormatted}, ${year}`;\n  return formatted;\n};\nexport const getDayFormatted = (date: Date): string => {\n  const day = \"\" + date.getDate();\n  const dayFormatted = day.length === 1 ? \"0\" + day : day;\n  return dayFormatted;\n};\nexport const getWeekday = (date: Date): string => {\n  const dayName = days[date.getDay()];\n  return dayName;\n};\nexport const getMonthName = (date: Date): string => {\n  const monthName = months[date.getMonth()];\n  return monthName;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { ITask } from \"../../types\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"./index.css\";\nimport { useRecoilValue } from \"recoil\";\nimport { dateState } from \"../../recoil/atoms\";\nimport { prettyDate } from \"../../utilities\";\n\ntype TaskType = {\n  task: ITask;\n  index: number;\n  columnId: string;\n  checked: string[] | null;\n  updateChecked: (columnId: string, task: ITask, check: boolean) => void;\n  showDeleteBtn?: boolean;\n  deleteEventHandler?: (tag: ITask) => void;\n  hasBigTag?: boolean;\n  onClick?: (task: ITask, columnId: string) => void;\n};\nconst Task: React.FC<TaskType> = ({\n  task,\n  index,\n  columnId,\n  checked,\n  updateChecked,\n  showDeleteBtn,\n  deleteEventHandler,\n  hasBigTag,\n  onClick,\n}) => {\n  const [isDone, setIsDone] = useState<boolean>(false);\n  const date = useRecoilValue(dateState);\n  useEffect(() => {\n    if (checked !== null) if (checked.includes(task.id)) setIsDone(true);\n  }, [checked, task.id]);\n  const handleInputChange = (event: any) => {\n    const check: boolean = event.target.checked;\n    if (checked !== null) {\n      updateChecked(columnId, task, check);\n    }\n    setIsDone(check);\n  };\n  const getTimeStatusColor = (taskDate: string | undefined) => {\n    if (taskDate) {\n      const tdate = new Date(prettyDate(date) + \" \" + taskDate);\n      const date4 = new Date(date.getTime() - 3600 * 1000 * 4); // 4 hours from tdate\n      if (tdate > date) return \"#FF7575\";\n      else if (tdate > date4) return \"#FFE193\";\n      return \"#ABF987\";\n    }\n    return \"transparent\";\n  };\n  return (\n    <Draggable draggableId={columnId + \"_\" + task.id} index={index}>\n      {(provided, snapshot) => (\n        <div\n          className={`taskContent ${snapshot.isDragging ? \"dragging\" : \"\"} ${\n            checked == null ? \"noCheck\" : \"\"\n          } ${showDeleteBtn ? \"showDeleteBtn\" : \"\"}`}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <input\n            type=\"checkbox\"\n            checked={isDone}\n            onChange={handleInputChange}\n          />\n          <p\n            onClick={() => {\n              if (onClick) onClick(task, columnId);\n            }}\n          >\n            {task.title}\n          </p>\n          <div className={hasBigTag ? \"bigTag\" : \"\"}>\n            <button\n              onClick={() => {\n                if (deleteEventHandler) deleteEventHandler(task);\n              }}\n            >\n              ✕\n            </button>\n            <div\n              className=\"timeStatus\"\n              style={{ backgroundColor: getTimeStatusColor(task?.time) }}\n            ></div>\n            <div\n              className=\"tagColor\"\n              hidden={task?.tag === undefined}\n              style={{ backgroundColor: task?.tag?.tagColor ?? \"initial\" }}\n            ></div>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\nimport \"./index.css\";\nimport { IColumn, ITask } from \"../../types\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Task from \"../Task\";\n\ntype ColumnType = {\n  column: IColumn;\n  tasks: ITask[];\n  showTitle: boolean;\n  showDeleteBtn?: boolean;\n  deleteEventHandler?: (tag: ITask) => void;\n  hasEmptyString: string;\n  hasBigTag?: boolean;\n  updateChecked: (columnId: string, task: ITask, check: boolean) => void;\n  onClick?: (task: ITask, columnId: string) => void;\n};\nconst Column: React.FC<ColumnType> = ({\n  column,\n  tasks,\n  showTitle,\n  showDeleteBtn,\n  deleteEventHandler,\n  hasEmptyString,\n  hasBigTag,\n  updateChecked,\n  onClick,\n}) => {\n  return (\n    <Droppable droppableId={String(column.id)}>\n      {(provided, snapshot) => (\n        <div\n          className={`taskColumn ${snapshot.isDraggingOver ? \"dragging\" : \"\"}`}\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n        >\n          {showTitle ? <h3>{column.title}</h3> : <></>}\n          {tasks.length === 0 && hasEmptyString !== \"\" ? (\n            <p>{hasEmptyString}</p>\n          ) : (\n            tasks.map((task, index) => {\n              return (\n                <Task\n                  key={task.id}\n                  task={task}\n                  index={index}\n                  columnId={column.id}\n                  checked={column?.checked || null}\n                  updateChecked={updateChecked}\n                  showDeleteBtn={showDeleteBtn}\n                  deleteEventHandler={deleteEventHandler}\n                  hasBigTag={hasBigTag}\n                  onClick={onClick}\n                />\n              );\n            })\n          )}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\n\nexport default Column;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./index.css\";\nimport Column from \"../Column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { IColumn, ITask, ITodoColumn } from \"../../types\";\n\ntype DroppableListType = {\n  rerender: boolean;\n  showTitle: boolean;\n  hasEmptyString: string;\n  showDeleteBtn?: boolean;\n  deleteEventHandler?: (tag: ITask) => void;\n  hasBigTag?: boolean;\n  onClick?: (task: ITask, columnId: string) => void;\n  data: ITodoColumn;\n  setData: (data: ITodoColumn) => void;\n};\nconst DroppableList: React.FC<DroppableListType> = ({\n  rerender,\n  showTitle,\n  hasEmptyString,\n  showDeleteBtn,\n  deleteEventHandler,\n  hasBigTag,\n  onClick,\n  data,\n  setData,\n}) => {\n  const [state, setState] = useState<ITodoColumn>(data);\n  const [isOverflow, setIsOverflow] = useState(false);\n  const divRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (divRef.current != null) {\n      const wrapper: HTMLDivElement = divRef.current;\n      const height = [...wrapper.children]\n        .map((taskColumn) => {\n          const col = taskColumn as HTMLDivElement;\n          return col.offsetHeight;\n        })\n        .reduce((a: number, b: number) => a + b, 0);\n      if (height > wrapper.offsetHeight) {\n        setIsOverflow(true);\n      }\n    }\n  }, [divRef, rerender]);\n\n  useEffect(() => {\n    setState(data);\n  }, [data]);\n\n  const updateChecked = (columnId: string, task: ITask, check: boolean) => {\n    const newColumns = state.columns.filter(\n      (col: IColumn) => col.id !== columnId\n    );\n    const newColumn: IColumn =\n      state.columns.find((col: IColumn) => col.id === columnId) ??\n      ({} as IColumn);\n    const oldChecked = newColumn?.checked;\n    if (oldChecked) {\n      const newChecked = [...new Set([...oldChecked, task.id])];\n      if (!check) newChecked.splice(newChecked.indexOf(task.id), 1);\n      const nColumn: IColumn = { ...newColumn, checked: newChecked };\n      const newState = { ...state, columns: [...newColumns, nColumn] };\n      setState(newState);\n      setData(newState);\n    }\n  };\n  const removeColumnId = (id: string) => {\n    return id.split(\"_\")[1];\n  };\n  const onDragEnd = (result: any) => {\n    const { destination, source, draggableId } = result;\n    if (!destination) return;\n    else if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    )\n      return;\n\n    const columnId: string = source.droppableId;\n    const column = state.columns.find((col: any) => col.id === columnId);\n    if (column) {\n      const newTaskIds = [...column.taskIds];\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, removeColumnId(draggableId));\n      const newColumn = { ...column, taskIds: newTaskIds };\n      const newColumns = state.columns.filter(\n        (col: IColumn) => col.id !== newColumn.id\n      );\n      const newState = { ...state, columns: [...newColumns, newColumn] };\n      setState(newState);\n      setData(newState);\n    }\n  };\n  return (\n    <div\n      className={`taskContainer ${isOverflow ? \"overflow\" : \"\"}`}\n      ref={divRef}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        {state.columnOrder.map((columnId: string) => {\n          const column: IColumn =\n            state.columns.find((col: IColumn) => col.id === columnId) ??\n            ({} as IColumn);\n          const tasks: ITask[] = column.taskIds\n            .map(\n              (taskId: string) =>\n                state.tasks.find((task: ITask) => task.id === taskId) ??\n                ({} as ITask)\n            )\n            .filter((task: ITask) => task.id);\n          return (\n            <Column\n              key={columnId}\n              column={column}\n              tasks={tasks}\n              showTitle={showTitle}\n              showDeleteBtn={showDeleteBtn}\n              deleteEventHandler={deleteEventHandler}\n              hasEmptyString={hasEmptyString}\n              updateChecked={updateChecked}\n              hasBigTag={hasBigTag}\n              onClick={onClick}\n            />\n          );\n        })}\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default DroppableList;\n","import { selector } from \"recoil\";\nimport * as utilities from \"../utilities\";\nimport { IColumn, ITag, ITask, ITodoColumn } from \"../types\";\nimport {\n  dailiesState,\n  dateState,\n  homeTasksState,\n  tagsState,\n  tasksState,\n} from \"./atoms\";\nimport { initialData } from \"../initialData\";\nimport { prettyDate } from \"../utilities\";\n\nexport const tagTasksState = selector({\n  key: \"tagTasks\",\n  get: ({ get }) => {\n    const tags: ITag[] = get(tagsState);\n    const tasks: ITask[] = [\n      ...tags.map((tag: ITag) => {\n        return { id: tag.id, title: tag.tagName, description: \"\", tag: tag };\n      }),\n    ];\n    const tagTasks: ITodoColumn = {\n      tasks: tasks,\n      columns: [\n        {\n          id: \"0\",\n          title: \"Tags\",\n          taskIds: [...tags.map((tag: ITag) => tag.id)],\n        },\n      ],\n      columnOrder: [\"0\"],\n    };\n    const objectColumns: any = {};\n    tagTasks.columns.forEach(\n      (col: IColumn) => (objectColumns[col.id] = col.taskIds)\n    );\n    return {\n      todoColumn: tagTasks,\n      taskIds: objectColumns,\n    };\n  },\n});\n\nexport const dailiesSelectorState = selector({\n  key: \"dailiesSelectorState\",\n  get: ({ get }) => {\n    const tasks: ITodoColumn = get(dailiesState);\n    const tags: ITag[] = get(tagsState);\n    const ntasksList: ITask[] = tasks?.tasks\n      ? [\n          ...tasks?.tasks?.map((task: ITask) => {\n            const tag = tags.find((t: ITag) => task?.tags?.includes(t.id));\n            if (tag) return { ...task, tag: tag };\n            else return task;\n          }),\n        ]\n      : [];\n    const ntasks = { ...tasks, tasks: ntasksList };\n    console.log(ntasks);\n    return {\n      todoColumn: ntasks,\n      tasks: ntasks.tasks,\n    };\n  },\n});\n\nexport const loadNewDailyTask = (\n  date: Date,\n  dailies: ITodoColumn,\n  force: boolean = false\n) => {\n  if (date.getTime() >= new Date(prettyDate(new Date())).getTime() || force) {\n    const weekday = utilities.getWeekday(date).toLowerCase();\n    const tasks = dailies.tasks;\n    const taskIds =\n      dailies.columns.find((col: IColumn) => col.id === weekday)?.taskIds ?? [];\n    const filteredTasks = tasks.filter((t: ITask) => taskIds.includes(t.id));\n    const taskCol: ITodoColumn = {\n      id: utilities.prettyDate(date),\n      tasks: filteredTasks,\n      columns: [\n        {\n          id: \"todo\",\n          title: \"To do\",\n          taskIds: taskIds,\n          checked: [],\n        },\n      ],\n      columnOrder: [\"todo\"],\n    };\n    return taskCol;\n  }\n  return initialData;\n};\nexport const tasksSelectorState = selector({\n  key: \"tasksSelectorState\",\n  get: ({ get }) => {\n    const date: Date = get(dateState);\n    const dateKey = utilities.prettyDate(date);\n    const dailies: ITodoColumn = get(dailiesState);\n    const taskCol: ITodoColumn[] = get(tasksState);\n    const curTasks: ITodoColumn = get(homeTasksState);\n    const filteredTasks: ITodoColumn[] = taskCol.filter(\n      (t: ITodoColumn) => t?.id === dateKey\n    );\n    const tasks: ITodoColumn =\n      filteredTasks.length > 0\n        ? filteredTasks[0]\n        : curTasks?.id === dateKey\n        ? curTasks\n        : { ...loadNewDailyTask(date, dailies), id: dateKey };\n    const tags: ITag[] = get(tagsState);\n    const ntasksList: ITask[] = [\n      ...tasks.tasks.map((task: ITask) => {\n        const tag = tags.find((t: ITag) => task?.tags?.includes(t.id));\n        if (tag) return { ...task, tag: tag };\n        else return task;\n      }),\n    ];\n    const ntasks = { ...tasks, tasks: ntasksList };\n    const tasksChecked = tasks.columns[0].checked;\n    return {\n      todoColumn: ntasks,\n      tasksChecked: tasksChecked,\n      tasks: ntasks.tasks,\n    };\n  },\n});\n","import React, { useEffect, useRef } from \"react\";\nimport { ITag, ITagSettings } from \"../../types\";\nimport \"./index.css\";\n\ntype TagSelectType = {\n  tag: ITag;\n  selected: boolean;\n  selectTagHandler: (id: string) => void;\n};\nconst TagSelect: React.FC<TagSelectType> = ({\n  tag,\n  selected,\n  selectTagHandler,\n}) => {\n  const tagRef = useRef<HTMLButtonElement>(null);\n  useEffect(() => {\n    if (tagRef.current) {\n      if (selected) tagRef.current.style.backgroundColor = tag.tagColor;\n      else tagRef.current.style.backgroundColor = \"\";\n    }\n  }, [tag, selected, tagRef]);\n  return (\n    <button\n      className=\"btn btn-select\"\n      ref={tagRef}\n      onClick={() => selectTagHandler(tag.id)}\n    >\n      {tag.tagName}\n    </button>\n  );\n};\ntype MultipleTagSelectType = {\n  tags: ITagSettings;\n  setTags: (tag: ITagSettings) => void;\n};\nconst MultipleTagSelect: React.FC<MultipleTagSelectType> = ({\n  tags,\n  setTags,\n}) => {\n  const selectTagHandler = (id: string) => {\n    const index: number = tags.selected.indexOf(id);\n    const selected: string[] = [...new Set([...tags.selected, id])];\n    // Toggle effect: remove if already exists\n    if (index !== -1) selected.splice(index, 1);\n    const newTags: ITagSettings = { ...tags, selected: selected };\n    setTags(newTags);\n  };\n  return (\n    <div className=\"multipleTagSelect\">\n      {tags?.tags.map((tag: ITag, index: number) => (\n        <TagSelect\n          key={index}\n          tag={tag}\n          selected={(tags?.selected.indexOf(tag.id) ?? -1) !== -1}\n          selectTagHandler={selectTagHandler}\n        />\n      ))}\n    </div>\n  );\n};\nexport default MultipleTagSelect;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { ITag, ITagSettings, ITask, ScreensEditType } from \"../../types\";\nimport MultipleTagSelect from \"../../components/MultipleTagSelect\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { tagsState, homeTasksState } from \"../../recoil/atoms\";\nimport \"./index.css\";\n\nenum TaskEditableAttributes {\n  TITLE = \"title\",\n  DESCRIPTION = \"description\",\n  TIME = \"time\",\n  DAILYTASK = \"dailyTask\",\n  TAG = \"tag\",\n  TAGS = \"tags\",\n}\nconst ScreensEditTask: React.FC<ScreensEditType> = ({\n  task: initialTask,\n  taskIds: _,\n  deleteEventHandler,\n}) => {\n  const divRef = useRef<HTMLDivElement>(null);\n  const [checkTime, setCheckTime] = useState<boolean>(\n    initialTask?.time !== undefined\n  );\n  const [isOverflow, setIsOverflow] = useState<boolean>(false);\n  const [task, setTask] = useState<ITask>(initialTask);\n  const [tasks, setTasks] = useRecoilState(homeTasksState);\n  const tags = useRecoilValue(tagsState);\n  const [tagsSelected, setTagsSelected] = useState<ITagSettings>({\n    tags: tags,\n    selected: task.tags ?? [],\n  });\n  const updateEventHandler = (\n    value: any,\n    attribute: TaskEditableAttributes\n  ) => {\n    setTask({ ...task, [attribute]: value });\n  };\n  const updateEventHandlerRef = useRef(updateEventHandler);\n\n  useEffect(() => {\n    if (divRef.current != null) {\n      const wrapper: HTMLDivElement = divRef.current;\n      const height = [...wrapper.children]\n        .map((taskColumn) => {\n          const col = taskColumn as HTMLDivElement;\n          return col.offsetHeight;\n        })\n        .reduce((a: number, b: number) => a + b, 0);\n      if (height > wrapper.offsetHeight - 40) {\n        setIsOverflow(true);\n      } else {\n        setIsOverflow(false);\n      }\n    }\n  }, [divRef, checkTime]);\n\n  const closePopup = () => {\n    const buttons: HTMLButtonElement[] = Array.from(\n      document.querySelectorAll(\"button.closeBtn\")\n    ) as HTMLButtonElement[];\n    buttons.forEach((btn) => btn.click());\n  };\n\n  const checkValidTask = (task: ITask) => {\n    return task.title !== \"\";\n  };\n  const editTask = () => {\n    if (checkValidTask(task)) {\n      // Load in tags on edit\n      const tag = tags.find((tg: ITag) => task?.tags?.includes(tg.id));\n      const ntask = tag ? { ...task, tag: tag } : task;\n      const ntaskList = tasks.tasks.filter((t: ITask) => t.id !== task.id);\n      const ntasks = { ...tasks, tasks: [...ntaskList, ntask] };\n      setTasks(ntasks);\n      closePopup();\n      console.log(\"finished editing\");\n    } else {\n      console.log(\"nope\");\n    }\n  };\n\n  const handleInputChange = (\n    setState: (state: boolean) => void,\n    state: boolean\n  ) => {\n    setState(state);\n  };\n\n  useEffect(() => {\n    updateEventHandlerRef.current(\n      tagsSelected.selected,\n      TaskEditableAttributes.TAGS\n    );\n  }, [tagsSelected.selected]);\n\n  return (\n    <>\n      <div className=\"task\">\n        <div\n          className={`taskSection small ${isOverflow ? \"overflow\" : \"\"}`}\n          ref={divRef}\n        >\n          <div className=\"inputs\">\n            <label htmlFor=\"title\">Title</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={task.title}\n              onChange={(event) =>\n                updateEventHandler(\n                  event.target.value,\n                  TaskEditableAttributes.TITLE\n                )\n              }\n              placeholder=\"TITLE...\"\n            />\n            <label htmlFor=\"description\">Description</label>\n            <input\n              type=\"text\"\n              id=\"description\"\n              name=\"description\"\n              value={task.description}\n              onChange={(event) =>\n                updateEventHandler(\n                  event.target.value,\n                  TaskEditableAttributes.DESCRIPTION\n                )\n              }\n              placeholder=\"DESCRIPTION...\"\n            />\n          </div>\n          <div className=\"inputWrapper\">\n            <input\n              type=\"checkbox\"\n              name=\"checkTime\"\n              id=\"checkTime\"\n              checked={checkTime}\n              onChange={(event: any) =>\n                handleInputChange(setCheckTime, event.target.checked)\n              }\n            />\n            <label htmlFor=\"checkTime\">check time?</label>\n          </div>\n          <div hidden={!checkTime}>\n            <div className=\"inputs\">\n              <label htmlFor=\"time\">Time</label>\n              <input\n                type=\"time\"\n                id=\"time\"\n                name=\"time\"\n                value={task.time ?? \"\"}\n                onChange={(event) =>\n                  updateEventHandler(\n                    event.target.value,\n                    TaskEditableAttributes.TIME\n                  )\n                }\n              />\n              <svg\n                className=\"clock\"\n                width=\"23\"\n                height=\"23\"\n                viewBox=\"0 0 23 23\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M22 11.5C22 17.299 17.299 22 11.5 22C5.70101 22 1 17.299 1 11.5C1 5.70101 5.70101 1 11.5 1C17.299 1 22 5.70101 22 11.5Z\"\n                  fill=\"white\"\n                  stroke=\"#A4BAF7\"\n                  strokeWidth=\"2\"\n                />\n                <path\n                  d=\"M14.0556 14.0559C16.6112 16.6114 11.5001 11.5003 11.5001 11.5003C11.5001 9.45586 11.5001 1.27808 11.5001 6.38919\"\n                  stroke=\"#707070\"\n                />\n              </svg>\n            </div>\n          </div>\n          <div className=\"multipleSelectWrapper\">\n            <label>Tags</label>\n            <MultipleTagSelect tags={tagsSelected} setTags={setTagsSelected} />\n          </div>\n        </div>\n        <button\n          className=\"btn center delete\"\n          onClick={() => {\n            if (deleteEventHandler) {\n              deleteEventHandler(task);\n              closePopup();\n            }\n          }}\n        >\n          DELETE TASK\n        </button>\n        <button className=\"btn center\" onClick={editTask}>\n          EDIT TASK\n        </button>\n      </div>\n    </>\n  );\n};\nexport default ScreensEditTask;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  IColumn,\n  ITagSettings,\n  ITask,\n  ITodoColumn,\n  ScreensEditType,\n} from \"../../types\";\nimport MultipleTagSelect from \"../../components/MultipleTagSelect\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { tagsState, dailiesState } from \"../../recoil/atoms\";\nimport { initialDaySettings } from \"../../initialData\";\nimport \"./index.css\";\nimport { dailiesSelectorState } from \"../../recoil/selectors\";\nimport { saveDailies } from \"../../api\";\n\nenum TaskEditableAttributes {\n  TITLE = \"title\",\n  DESCRIPTION = \"description\",\n  TIME = \"time\",\n  DAILYTASK = \"dailyTask\",\n  TAG = \"tag\",\n  TAGS = \"tags\",\n}\nconst ScreensEditDaily: React.FC<ScreensEditType> = ({\n  task: initialTask,\n  taskIds: _,\n  deleteEventHandler,\n}) => {\n  const divRef = useRef<HTMLDivElement>(null);\n  const [isOverflow, setIsOverflow] = useState<boolean>(false);\n  const [task, setTask] = useState<ITask>(initialTask);\n  const [dailies, setDailies] = useRecoilState(dailiesState);\n  const tags = useRecoilValue(tagsState);\n  const dailiesSelector = useRecoilValue(dailiesSelectorState);\n  const [days, setDays] = useState(initialDaySettings);\n  const [tagsSelected, setTagsSelected] = useState<ITagSettings>({\n    tags: tags,\n    selected: task.tags ?? [],\n  });\n  const updateEventHandler = (\n    value: any,\n    attribute: TaskEditableAttributes\n  ) => {\n    setTask({ ...task, [attribute]: value });\n  };\n  const updateEventHandlerRef = useRef(updateEventHandler);\n\n  useEffect(() => {\n    const checkedDays: string[] = task?.dailyTask ?? [];\n    const ndays: ITagSettings = { ...days, selected: checkedDays };\n    setDays(ndays);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dailiesSelector.tasks[0].dailyTask]);\n\n  useEffect(() => {\n    if (divRef.current != null) {\n      const wrapper: HTMLDivElement = divRef.current;\n      const height = [...wrapper.children]\n        .map((taskColumn) => {\n          const col = taskColumn as HTMLDivElement;\n          return col.offsetHeight;\n        })\n        .reduce((a: number, b: number) => a + b, 0);\n      if (height > wrapper.offsetHeight - 40) {\n        setIsOverflow(true);\n      } else {\n        setIsOverflow(false);\n      }\n    }\n  }, [divRef]);\n\n  const closePopup = () => {\n    const buttons: HTMLButtonElement[] = Array.from(\n      document.querySelectorAll(\"button.closeBtn\")\n    ) as HTMLButtonElement[];\n    buttons.forEach((btn) => btn.click());\n  };\n\n  const checkValidTask = (task: ITask) => {\n    return task.title !== \"\";\n  };\n  const editTask = () => {\n    if (checkValidTask(task)) {\n      const ntaskList = [\n        ...dailies.tasks.filter((t: ITask) => t.id !== task.id),\n        task,\n      ];\n      const columns: IColumn[] = JSON.parse(JSON.stringify(dailies.columns));\n      const nColumns: IColumn[] = [];\n      for (let i = 0; i < columns.length; i++) {\n        const col: IColumn = columns[i];\n        col.taskIds = col.taskIds.filter((id: string) => id !== task.id);\n        if (task?.dailyTask?.includes(col.id))\n          col.taskIds = [...col.taskIds, task.id];\n        nColumns.push(col);\n      }\n      const ntasks: ITodoColumn = {\n        ...dailies,\n        columns: nColumns,\n        tasks: ntaskList,\n      };\n      setDailies(ntasks);\n      saveDailies(ntasks);\n      closePopup();\n      console.log(\"finished editing\");\n    } else {\n      console.log(\"nope\");\n    }\n  };\n\n  useEffect(() => {\n    updateEventHandlerRef.current(\n      tagsSelected.selected,\n      TaskEditableAttributes.TAGS\n    );\n  }, [tagsSelected.selected]);\n\n  useEffect(() => {\n    updateEventHandlerRef.current(\n      days.selected,\n      TaskEditableAttributes.DAILYTASK\n    );\n  }, [days.selected]);\n\n  return (\n    <>\n      <div className=\"task\">\n        <div\n          className={`taskSection small ${isOverflow ? \"overflow\" : \"\"}`}\n          ref={divRef}\n        >\n          <div className=\"inputs\">\n            <label htmlFor=\"title\">Title</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={task.title}\n              onChange={(event) =>\n                updateEventHandler(\n                  event.target.value,\n                  TaskEditableAttributes.TITLE\n                )\n              }\n              placeholder=\"TITLE...\"\n            />\n            <label htmlFor=\"description\">Description</label>\n            <input\n              type=\"text\"\n              id=\"description\"\n              name=\"description\"\n              value={task.description}\n              onChange={(event) =>\n                updateEventHandler(\n                  event.target.value,\n                  TaskEditableAttributes.DESCRIPTION\n                )\n              }\n              placeholder=\"DESCRIPTION...\"\n            />\n          </div>\n          <div className=\"multipleSelectWrapper\">\n            <label>Tags</label>\n            <MultipleTagSelect tags={tagsSelected} setTags={setTagsSelected} />\n          </div>\n          <label>Daily task:</label>\n          <div className=\"multipleSelectWrapper\">\n            <MultipleTagSelect tags={days} setTags={setDays} />\n          </div>\n        </div>\n        <button\n          className=\"btn center delete\"\n          onClick={() => {\n            if (deleteEventHandler) {\n              deleteEventHandler(task);\n              closePopup();\n            }\n          }}\n        >\n          DELETE DAILY TASK\n        </button>\n        <button className=\"btn center\" onClick={editTask}>\n          EDIT DAILY TASK\n        </button>\n      </div>\n    </>\n  );\n};\nexport default ScreensEditDaily;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport DroppableList from \"../../components/DroppableList\";\nimport Calendar from \"react-calendar\";\nimport Popup from \"../../components/Popup\";\nimport * as utilities from \"../../utilities\";\nimport { IColumn, ITag, ITask, ITodoColumn, ScreensType } from \"../../types\";\nimport \"./index.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  dailiesState,\n  dateState,\n  homeTasksState,\n  tagsState,\n  tasksState,\n} from \"../../recoil/atoms\";\nimport { loadNewDailyTask, tasksSelectorState } from \"../../recoil/selectors\";\nimport { ScreensEditTask } from \"../Task\";\nimport { saveTasks } from \"../../api\";\n\nconst ScreensHome: React.FC<ScreensType> = ({ hidden }) => {\n  const [rerender, setRerender] = useState(false);\n  const [refreshPopup, setRefreshPopup] = useState<boolean>(false);\n  const [smallPopup, setSmallPopup] = useState<boolean>(false);\n  const [popup, setPopup] = useState<boolean>(false);\n  const [date, setDate] = useRecoilState(dateState);\n  const [selectedTask, setSelectedTask] = useState<ITask>();\n  const [tasks, setTasks] = useRecoilState(homeTasksState);\n  const [taskCol, setTaskCol] = useRecoilState(tasksState);\n  const tags = useRecoilValue(tagsState);\n  const dailies = useRecoilValue(dailiesState);\n  const tasksSelector = useRecoilValue(tasksSelectorState);\n  const todayRef = useRef(new Date());\n  const compareDiff = (taskCol: ITodoColumn[], nTaskCol: ITodoColumn[]) => {\n    const d1 = taskCol.map((t: ITodoColumn) => JSON.stringify(t));\n    const d2 = nTaskCol.map((t: ITodoColumn) => JSON.stringify(t));\n    d1.sort();\n    d2.sort();\n    return JSON.stringify(d1) !== JSON.stringify(d2);\n  };\n  const compareDiffRef = useRef(compareDiff);\n  const setTasksRef = useRef(setTasks);\n\n  const compareDaily = (tasks: ITodoColumn, dailies: ITodoColumn) => {\n    const dailyTasks = loadNewDailyTask(date, dailies);\n    if (tasks.id !== dailyTasks.id) return false;\n    const ntasks = {\n      ...tasks,\n      tasks: tasks.tasks.map((t: ITask) => {\n        return { ...t, tag: {} };\n      }),\n    };\n    const ndailyTasks = {\n      ...dailyTasks,\n      tasks: dailyTasks.tasks.map((t: ITask) => {\n        return { ...t, tag: {} };\n      }),\n    };\n    const d1 = JSON.stringify(ntasks);\n    const d2 = JSON.stringify(ndailyTasks);\n    return d1 !== d2;\n  };\n\n  useEffect(() => {\n    if (!hidden) setRerender(true);\n    else setRerender(false);\n  }, [hidden]);\n\n  useEffect(() => {\n    setTasks(tasksSelector.todoColumn);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [date]);\n\n  useEffect(() => {\n    // Load in tags if not exists\n    const tasksWithoutTags = tasks.tasks.filter(\n      (t: ITask) => t?.tag === undefined && (t?.tags?.length ?? -1 > 0)\n    );\n    if (tasksWithoutTags.length > 0) {\n      const ntasks = tasks.tasks.map((t: ITask) => {\n        const tag = tags.find((tg: ITag) => t?.tags?.includes(tg.id));\n        if (!tag) return t;\n        return { ...t, tag: tag };\n      });\n      setTasksRef.current({ ...tasks, tasks: ntasks });\n    }\n  }, [tasks, tags]);\n\n  useEffect(() => {\n    const nTaskCol = [\n      ...taskCol.filter((t: ITodoColumn) => t?.id !== tasks?.id),\n      tasks,\n    ];\n    if (\n      compareDiffRef.current(taskCol, nTaskCol) &&\n      compareDaily(tasks, dailies) &&\n      tasks?.id\n    ) {\n      setTaskCol(nTaskCol);\n      console.log(\"saved\");\n      saveTasks(nTaskCol);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [date, tasks, dailies]);\n\n  const addDate = (days: number) => {\n    const ndate = new Date(date);\n    ndate.setDate(ndate.getDate() + days);\n    setDate(ndate);\n  };\n  const selectTaskHandler = (task: ITask, _: string) => {\n    setPopup(true);\n    setSelectedTask(task);\n  };\n  const deleteEventHandler = (task: ITask) => {\n    // TODO: Add delete animation :)\n    const ntaskList = tasks.tasks.filter((t: ITask) => t.id !== task.id);\n    // Remove the id from column taskIds and checked attributes\n    const ncolumn: IColumn = {\n      ...tasks.columns[0],\n      taskIds: tasks.columns[0].taskIds.filter((id: string) => id !== task.id),\n      checked:\n        tasks.columns[0]?.checked?.filter((id: string) =>\n          ntaskList.map((t: ITask) => t.id).includes(id)\n        ) ?? [],\n    };\n    // Update tasks and taskCol\n    const ntasks = { ...tasks, columns: [ncolumn], tasks: ntaskList };\n    const nTaskCol = [\n      ...taskCol.filter((t: ITodoColumn) => t?.id !== tasks?.id),\n      ntasks,\n    ];\n    setTasks(ntasks);\n    setTaskCol(nTaskCol);\n    // Save if tasks is empty as it will not be saved on the useEffect hook above otherwise\n    if (ntaskList.length === 0) {\n      saveTasks(nTaskCol);\n    }\n  };\n  return (\n    <div className=\"todaysTask\" hidden={hidden}>\n      <div className=\"topBackground\">\n        <h3>DAILYJUKIPLANNER</h3>\n        <button className=\"refreshBtn\" onClick={() => setRefreshPopup(true)}>\n          <svg\n            width=\"21\"\n            height=\"20\"\n            viewBox=\"0 0 21 20\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M18.33 4.69398L18.75 3.31698C18.8276 3.0633 19.0027 2.85083 19.237 2.7263C19.4712 2.60178 19.7453 2.5754 19.999 2.65298C20.2527 2.73056 20.4651 2.90573 20.5897 3.13996C20.7142 3.37419 20.7406 3.6483 20.663 3.90198L19.493 7.72698C19.4154 7.98047 19.2404 8.19279 19.0064 8.3173C18.7724 8.44181 18.4985 8.46831 18.245 8.39098L14.42 7.22098C14.2917 7.18488 14.172 7.12353 14.0678 7.04052C13.9636 6.95751 13.8771 6.85452 13.8132 6.73759C13.7494 6.62067 13.7096 6.49216 13.6961 6.35963C13.6826 6.2271 13.6957 6.0932 13.7347 5.96581C13.7737 5.83842 13.8377 5.72011 13.923 5.61781C14.0084 5.51551 14.1133 5.4313 14.2316 5.37011C14.35 5.30892 14.4793 5.27199 14.6121 5.2615C14.7449 5.251 14.8785 5.26714 15.005 5.30898L16.677 5.81998C15.9378 4.69888 14.9068 3.80066 13.695 3.22206C12.4832 2.64347 11.1366 2.40642 9.80003 2.53646C8.4635 2.66649 7.18777 3.15867 6.11023 3.95999C5.03268 4.76132 4.19416 5.84142 3.68498 7.08398L3.42498 7.71698C3.37769 7.84193 3.30584 7.95615 3.21368 8.05287C3.12152 8.1496 3.01091 8.22687 2.88839 8.28014C2.76586 8.3334 2.63391 8.36158 2.50031 8.36299C2.36672 8.36441 2.23419 8.33904 2.11056 8.28839C1.98694 8.23774 1.87471 8.16282 1.78052 8.06807C1.68633 7.97333 1.61208 7.86066 1.56215 7.73674C1.51222 7.61282 1.48764 7.48015 1.48984 7.34656C1.49204 7.21298 1.52099 7.08119 1.57498 6.95898L1.83498 6.32598C2.48121 4.74926 3.5447 3.37833 4.91125 2.3604C6.27781 1.34247 7.89583 0.715984 9.59156 0.548209C11.2873 0.380435 12.9967 0.677709 14.5362 1.40811C16.0758 2.13852 17.3873 3.27446 18.33 4.69398V4.69398ZM2.80798 15.307L2.48098 16.618C2.45172 16.748 2.39677 16.8709 2.31935 16.9793C2.24193 17.0878 2.14362 17.1797 2.03017 17.2497C1.91673 17.3196 1.79045 17.3662 1.65876 17.3866C1.52706 17.4071 1.39261 17.401 1.26331 17.3687C1.134 17.3364 1.01245 17.2787 0.905787 17.1988C0.799129 17.1188 0.70952 17.0184 0.642224 16.9034C0.574929 16.7884 0.531306 16.661 0.513919 16.5289C0.496531 16.3968 0.50573 16.2625 0.540975 16.134L1.50798 12.254C1.5406 12.1219 1.59984 11.9978 1.68208 11.8894C1.76431 11.781 1.86781 11.6905 1.98623 11.6235C2.10465 11.5564 2.23551 11.5143 2.37079 11.4996C2.50607 11.4849 2.64292 11.498 2.77298 11.538L6.60098 12.492C6.85837 12.5562 7.07972 12.72 7.21634 12.9474C7.35296 13.1747 7.39366 13.4471 7.32948 13.7045C7.26529 13.9619 7.10149 14.1832 6.8741 14.3198C6.64671 14.4565 6.37437 14.4972 6.11698 14.433L4.33098 13.988C5.09449 15.1568 6.17373 16.0853 7.44352 16.6656C8.7133 17.2459 10.1216 17.4544 11.5051 17.2668C12.8885 17.0792 14.1904 16.5033 15.2598 15.6058C16.3292 14.7082 17.1223 13.5259 17.547 12.196C17.5869 12.0708 17.6511 11.9548 17.7359 11.8544C17.8206 11.7541 17.9243 11.6714 18.0411 11.6111C18.1578 11.5509 18.2852 11.5142 18.4161 11.5032C18.547 11.4922 18.6788 11.5071 18.804 11.547C18.9291 11.5869 19.0452 11.6511 19.1455 11.7359C19.2459 11.8206 19.3285 11.9243 19.3888 12.0411C19.4491 12.1578 19.4858 12.2852 19.4968 12.4161C19.5078 12.547 19.4929 12.6788 19.453 12.804C19.0367 14.1099 18.3392 15.3088 17.4097 16.3162C16.4802 17.3236 15.3413 18.1151 14.073 18.635C12.0968 19.4446 9.90361 19.556 7.85553 18.951C5.80745 18.3459 4.02694 17.0605 2.80798 15.307V15.307Z\"\n              fill=\"white\"\n            />\n          </svg>\n        </button>\n        <div className=\"infoBox\">\n          <div className=\"dateBox\">\n            <p className=\"day\">{utilities.getDayFormatted(todayRef.current)}</p>\n            <p className=\"month\">{utilities.getMonthName(todayRef.current)}</p>\n            <p className=\"year\">{todayRef.current.getFullYear()}</p>\n            <p className=\"weekday\">{utilities.getWeekday(todayRef.current)}</p>\n          </div>\n          <div className=\"statsBox\">\n            <div className=\"stats\">\n              <p className=\"num\">{tasksSelector.tasksChecked?.length ?? 0}</p>\n              <p>done</p>\n            </div>\n            <div className=\"stats\">\n              <p className=\"num\">{tasksSelector.tasks?.length ?? 0}</p>\n              <p>due today</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"navigationBox\">\n          <div className=\"statsBox\">\n            <p>\n              {utilities.prettyDate(date)}\n              <span>{utilities.getWeekday(date)}</span>\n            </p>\n            <div>\n              <button onClick={() => setSmallPopup(true)}>\n                <svg\n                  width=\"22\"\n                  height=\"22\"\n                  viewBox=\"0 0 17 17\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M0.4 2.7063C0.4 1.82264 1.11634 1.1063 2 1.1063H15C15.8837 1.1063 16.6 1.82264 16.6 2.7063V11.421C16.6 12.3046 15.8837 13.021 15 13.021H2C1.11634 13.021 0.4 12.3046 0.4 11.421L0.4 2.7063Z\"\n                    stroke=\"#707070\"\n                    strokeWidth=\"0.8\"\n                  />\n                  <path d=\"M4.76001 0V3.17867\" stroke=\"#707070\" />\n                  <path d=\"M12.2401 0V3.17867\" stroke=\"#707070\" />\n                  <path\n                    d=\"M0 4.47363L17 4.47363\"\n                    stroke=\"#707070\"\n                    strokeWidth=\"0.8\"\n                  />\n                  <path d=\"M8.5 3.17859V-8.14795e-05\" stroke=\"#707070\" />\n                  <path\n                    d=\"M13.021 11.1842C13.021 13.6811 10.9969 15.7053 8.49997 15.7053C6.00306 15.7053 3.97892 13.6811 3.97892 11.1842C3.97892 8.68733 6.00306 6.66318 8.49997 6.66318C10.9969 6.66318 13.021 8.68733 13.021 11.1842Z\"\n                    fill=\"#F7DAF8\"\n                    stroke=\"#707070\"\n                    strokeWidth=\"0.8\"\n                  />\n                  <path\n                    d=\"M9.59357 12.2779C10.6871 13.3715 8.5 11.1844 8.5 11.1844C8.5 10.3095 8.5 6.81011 8.5 8.99724\"\n                    stroke=\"#707070\"\n                    strokeWidth=\"0.5\"\n                  />\n                </svg>\n              </button>\n              <button onClick={() => setDate(new Date())}>\n                <svg\n                  width=\"22\"\n                  height=\"20\"\n                  viewBox=\"0 0 17 15\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M11.0777 10.0441L11.1172 10.4H11.4753H11.5023C12.0592 10.4 12.5934 10.6213 12.9872 11.0151C13.381 11.4089 13.6023 11.9431 13.6023 12.5C13.6023 13.057 13.381 13.5911 12.9872 13.985C12.5934 14.3788 12.0592 14.6 11.5023 14.6L3.00227 14.6L3.00197 14.6C2.33061 14.6005 1.68508 14.3413 1.2005 13.8767C0.715928 13.412 0.42987 12.7779 0.40221 12.1072C0.37455 11.4364 0.607432 10.7809 1.05211 10.2779C1.49678 9.77493 2.11878 9.46346 2.7879 9.4087L3.04697 9.38749L3.13282 9.14215C3.4398 8.26489 4.03572 7.51797 4.82289 7.02384C5.61006 6.5297 6.54175 6.31767 7.46523 6.42252C8.38871 6.52736 9.24916 6.94285 9.90553 7.60088C10.5619 8.2589 10.9752 9.12041 11.0777 10.0441Z\"\n                    stroke=\"#707070\"\n                    strokeWidth=\"0.8\"\n                  />\n                  <path\n                    d=\"M14.0715 2.28415L14.0716 2.28418C14.0955 2.26112 14.1145 2.23353 14.1276 2.20303C14.1407 2.17253 14.1476 2.13972 14.1479 2.10653C14.1482 2.07333 14.1419 2.04041 14.1293 2.00969C14.1167 1.97896 14.0981 1.95105 14.0747 1.92758C14.0512 1.90411 14.0233 1.88554 13.9926 1.87297C13.9618 1.8604 13.9289 1.85408 13.8957 1.85437C13.8625 1.85465 13.8297 1.86155 13.7992 1.87465C13.7687 1.88775 13.7411 1.9068 13.7181 1.93068L13.7149 1.93393L13.7149 1.9339L13.007 2.64078C12.96 2.68778 12.9336 2.75153 12.9336 2.818C12.9336 2.88447 12.96 2.94822 13.007 2.99522C13.054 3.04223 13.1178 3.06863 13.1843 3.06863C13.2507 3.06863 13.3144 3.04227 13.3614 2.99535L14.0715 2.28415ZM14.0715 2.28415L14.0684 2.28735L13.3615 2.99522L14.0715 2.28415ZM13.361 9.00425L13.3615 9.00478L14.0684 9.71172C14.0684 9.71174 14.0685 9.71176 14.0685 9.71178C14.0932 9.73654 14.1125 9.76622 14.125 9.7989C14.1287 9.80863 14.1318 9.81855 14.1343 9.82862C13.8016 9.50115 13.4075 9.23481 12.9711 9.04896C12.9976 9.00605 13.0365 8.97218 13.0827 8.9518C13.1289 8.93138 13.1803 8.92547 13.23 8.93483C13.2796 8.94419 13.3253 8.9684 13.361 9.00425ZM10.179 0.323223C10.2259 0.370107 10.2523 0.433695 10.2523 0.5V1.5C10.2523 1.5663 10.2259 1.62989 10.179 1.67678C10.1321 1.72366 10.0686 1.75 10.0023 1.75C9.93595 1.75 9.87236 1.72366 9.82548 1.67678C9.77859 1.62989 9.75225 1.5663 9.75225 1.5V0.5C9.75225 0.433696 9.77859 0.370107 9.82548 0.323223C9.87236 0.276339 9.93595 0.25 10.0023 0.25C10.0686 0.25 10.1321 0.276339 10.179 0.323223ZM6.11672 1.86665C6.1817 1.86609 6.24431 1.89084 6.29133 1.93563L6.99748 2.64078C6.99751 2.64081 6.99754 2.64084 6.99757 2.64087C7.0208 2.66412 7.03923 2.69172 7.05181 2.72209C7.0644 2.7525 7.07088 2.78509 7.07088 2.818C7.07088 2.85091 7.0644 2.8835 7.05181 2.91391C7.03921 2.94432 7.02075 2.97195 6.99748 2.99522C6.9742 3.0185 6.94657 3.03696 6.91616 3.04955C6.88576 3.06215 6.85317 3.06863 6.82025 3.06863C6.78734 3.06863 6.75475 3.06215 6.72434 3.04955C6.69393 3.03696 6.6663 3.0185 6.64303 2.99522L5.93788 2.28908C5.8931 2.24206 5.86834 2.17945 5.86891 2.11447C5.86948 2.04892 5.89577 1.98622 5.94212 1.93987C5.98847 1.89352 6.05117 1.86722 6.11672 1.86665ZM8.56259 4.27044C8.36589 4.43407 8.19891 4.62974 8.06846 4.84874C7.89486 4.81607 7.71844 4.79121 7.53969 4.7745C7.67538 4.50222 7.85566 4.25362 8.07379 4.03933C8.37245 3.74591 8.73416 3.52457 9.13135 3.39216C9.52853 3.25976 9.95071 3.21979 10.3657 3.27531C10.7807 3.33083 11.1775 3.48037 11.5259 3.71252C11.8743 3.94468 12.1651 4.25333 12.3762 4.61493C12.5872 4.97653 12.7129 5.38154 12.7436 5.79909C12.7743 6.21663 12.7093 6.63568 12.5536 7.0243C12.4397 7.30826 12.2796 7.5705 12.0804 7.80065C11.9965 7.64331 11.9055 7.49015 11.8078 7.34181C11.9597 7.1373 12.076 6.90807 12.1514 6.66373C12.2463 6.35631 12.2742 6.03212 12.2331 5.71303C12.192 5.39393 12.083 5.08735 11.9134 4.81397C11.7438 4.54058 11.5175 4.30676 11.2498 4.12826C10.9822 3.94976 10.6793 3.83074 10.3618 3.77922C10.0442 3.72771 9.71925 3.7449 9.40888 3.82964C9.09851 3.91438 8.80993 4.0647 8.56259 4.27044ZM14.3255 5.82322C14.3724 5.77634 14.4359 5.75 14.5023 5.75H15.5023C15.5686 5.75 15.6321 5.77634 15.679 5.82322C15.7259 5.87011 15.7523 5.9337 15.7523 6C15.7523 6.0663 15.7259 6.12989 15.679 6.17678C15.6321 6.22366 15.5686 6.25 15.5023 6.25H14.5023C14.4359 6.25 14.3724 6.22366 14.3255 6.17678C14.2786 6.12989 14.2523 6.0663 14.2523 6C14.2523 5.9337 14.2786 5.87011 14.3255 5.82322Z\"\n                    stroke=\"#707070\"\n                    strokeWidth=\"0.5\"\n                  />\n                </svg>\n              </button>\n            </div>\n          </div>\n          <div className=\"navBox\">\n            <button onClick={() => addDate(-1)}>←</button>\n            <button onClick={() => addDate(1)}>→</button>\n          </div>\n        </div>\n      </div>\n      <DroppableList\n        rerender={rerender}\n        data={tasks}\n        setData={setTasks}\n        showTitle={false}\n        deleteEventHandler={deleteEventHandler}\n        hasEmptyString={\"no tasks added this day...\"}\n        onClick={selectTaskHandler}\n      />\n      <Popup\n        isFullscreen={false}\n        shown={smallPopup}\n        children={\n          smallPopup ? (\n            <div className=\"popupWrapper dateWrapper\">\n              <h1>SELECT DATE</h1>\n              <Calendar onChange={setDate} value={date} />\n              <button className=\"btn\" onClick={() => setSmallPopup(false)}>\n                DONE\n              </button>\n            </div>\n          ) : (\n            <></>\n          )\n        }\n        closeEvent={() => setSmallPopup(false)}\n      />\n      <Popup\n        isFullscreen={false}\n        shown={refreshPopup}\n        children={\n          refreshPopup ? (\n            <div className=\"popupWrapper center\">\n              <h1 className=\"title\">R YOU SURE?</h1>\n              <p>Action: REFRESH DAILY TASKS</p>\n              <button\n                className=\"btn delete\"\n                onClick={() => setRefreshPopup(false)}\n              >\n                NO\n              </button>\n              <button\n                className=\"btn\"\n                onClick={() => {\n                  const ntasks = loadNewDailyTask(date, dailies, true);\n                  const nTaskCol = [\n                    ...taskCol.filter((t: ITodoColumn) => t?.id !== tasks?.id),\n                    ntasks,\n                  ];\n                  setTasks(ntasks);\n                  setTaskCol(nTaskCol);\n                  saveTasks(nTaskCol);\n                  setRefreshPopup(false);\n                }}\n              >\n                YES\n              </button>\n            </div>\n          ) : (\n            <></>\n          )\n        }\n        closeEvent={() => \"\"}\n      />\n      <Popup\n        isFullscreen={true}\n        shown={popup}\n        closeEvent={() => {\n          setPopup(false);\n        }}\n        children={\n          <>\n            {popup && selectedTask ? (\n              <ScreensEditTask\n                task={selectedTask}\n                taskIds={[]}\n                deleteEventHandler={deleteEventHandler}\n              />\n            ) : (\n              <></>\n            )}\n          </>\n        }\n        title=\"EDIT TASK\"\n      />\n    </div>\n  );\n};\nexport default ScreensHome;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { IColumn, ITask, ScreensType } from \"../../types\";\nimport DroppableList from \"../../components/DroppableList\";\nimport \"./index.css\";\nimport * as utilities from \"../../utilities\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { dailiesState } from \"../../recoil/atoms\";\nimport Popup from \"../../components/Popup\";\nimport ScreensEditDaily from \"./ScreensEditDaily\";\nimport { dailiesSelectorState } from \"../../recoil/selectors\";\nimport { saveDailies } from \"../../api\";\n\nconst ScreensDailies: React.FC<ScreensType> = ({ hidden }) => {\n  const [rerender, setRerender] = useState(false);\n  const [dailies, setDailies] = useRecoilState(dailiesState);\n  const dailiesSelector = useRecoilValue(dailiesSelectorState);\n  const [popup, setPopup] = useState<boolean>(false);\n  const [selectedTask, setSelectedTask] = useState<ITask>();\n  const dateRef = useRef(new Date());\n\n  useEffect(() => {\n    if (!hidden) setRerender(true);\n    else setRerender(false);\n  }, [hidden]);\n\n  const selectTaskHandler = (task: ITask, _: string) => {\n    setPopup(true);\n    setSelectedTask(task);\n  };\n\n  const deleteEventHandler = (task: ITask) => {\n    const ntasks = dailies.tasks.filter((t: ITask) => t.id !== task.id);\n    const ncolumns: IColumn[] = dailies.columns.map((col: IColumn) => {\n      return {\n        ...col,\n        taskIds: col.taskIds.filter((id: string) => id !== task.id),\n      };\n    });\n    const ndailies = { ...dailies, tasks: ntasks, columns: ncolumns };\n    setDailies(ndailies);\n    saveDailies(ndailies);\n  };\n  return (\n    <div className=\"dailies simpleScreen\" hidden={hidden}>\n      <div className=\"topBackground topSimple\">\n        <div className=\"title\">\n          <svg\n            width=\"18\"\n            height=\"16\"\n            viewBox=\"0 0 16 14\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M7.50061 2.08579L13.5006 8.08579V12.2928C13.5006 12.6906 13.3426 13.0721 13.0613 13.3534C12.78 13.6348 12.3984 13.7928 12.0006 13.7928H3.00061C2.60279 13.7928 2.22125 13.6348 1.93995 13.3534C1.65865 13.0721 1.50061 12.6906 1.50061 12.2928V8.08579L7.50061 2.08579ZM12.5006 1.29279V4.79279L10.5006 2.79279V1.29279C10.5006 1.16018 10.5533 1.033 10.6471 0.939232C10.7408 0.845464 10.868 0.792786 11.0006 0.792786H12.0006C12.1332 0.792786 12.2604 0.845464 12.3542 0.939232C12.4479 1.033 12.5006 1.16018 12.5006 1.29279Z\"\n              fill=\"white\"\n            />\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M6.79363 0.292786C6.98116 0.105315 7.23547 0 7.50063 0C7.7658 0 8.0201 0.105315 8.20763 0.292786L14.8546 6.93879C14.9485 7.03267 15.0013 7.16001 15.0013 7.29279C15.0013 7.42556 14.9485 7.5529 14.8546 7.64679C14.7607 7.74067 14.6334 7.79342 14.5006 7.79342C14.3679 7.79342 14.2405 7.74067 14.1466 7.64679L7.50063 0.999786L0.854632 7.64679C0.760745 7.74067 0.633407 7.79342 0.500632 7.79342C0.367856 7.79342 0.240518 7.74067 0.146632 7.64679C0.052745 7.5529 0 7.42556 0 7.29279C0 7.16001 0.052745 7.03267 0.146632 6.93879L6.79363 0.292786Z\"\n              fill=\"white\"\n            />\n          </svg>\n          <h1>Dailies</h1>\n        </div>\n        <h2>today's date</h2>\n        <p>{utilities.prettyDate(dateRef.current)}</p>\n      </div>\n      <DroppableList\n        rerender={rerender}\n        data={dailiesSelector.todoColumn}\n        setData={setDailies}\n        showTitle={true}\n        hasEmptyString={\"no tasks scheduled this day...\"}\n        onClick={selectTaskHandler}\n      />\n      <Popup\n        isFullscreen={true}\n        shown={popup}\n        closeEvent={() => {\n          setPopup(false);\n        }}\n        children={\n          <>\n            {popup && selectedTask ? (\n              <ScreensEditDaily\n                task={selectedTask}\n                taskIds={[]}\n                deleteEventHandler={deleteEventHandler}\n              />\n            ) : (\n              <></>\n            )}\n          </>\n        }\n        title=\"EDIT DAILY TASK\"\n      />\n    </div>\n  );\n};\nexport default ScreensDailies;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { tagsState } from \"../../recoil/atoms\";\nimport { ITag, ScreensEditType } from \"../../types\";\nimport \"./index.css\";\n\nconst ScreensEditTag: React.FC<ScreensEditType> = ({\n  task,\n  taskIds,\n  deleteEventHandler,\n}) => {\n  const divRef = useRef<HTMLDivElement>(null);\n  const [isOverflow, setIsOverflow] = useState<boolean>(false);\n  const [tag, setTag] = useState<ITag>(task?.tag ?? ({} as ITag));\n  const [tags, setTags] = useRecoilState(tagsState);\n\n  useEffect(() => {\n    if (divRef.current != null) {\n      const wrapper: HTMLDivElement = divRef.current;\n      const height = [...wrapper.children]\n        .map((taskColumn) => {\n          const col = taskColumn as HTMLDivElement;\n          return col.offsetHeight;\n        })\n        .reduce((a: number, b: number) => a + b, 0);\n      if (height > wrapper.offsetHeight - 40) {\n        setIsOverflow(true);\n      } else {\n        setIsOverflow(false);\n      }\n    }\n  }, [divRef]);\n\n  const closePopup = () => {\n    const buttons: HTMLButtonElement[] = Array.from(\n      document.querySelectorAll(\"button.closeBtn\")\n    ) as HTMLButtonElement[];\n    buttons.forEach((btn) => btn.click());\n  };\n  const editTag = () => {\n    const ntags: ITag[] = [...tags.filter((t: ITag) => t.id !== tag.id), tag];\n    ntags.sort((a, b) => {\n      const indA = taskIds?.indexOf(a.id) ?? 0;\n      const indB = taskIds?.indexOf(b.id) ?? 0;\n      return indA - indB;\n    });\n    setTags(ntags);\n    closePopup();\n  };\n\n  const handleInputChange = (tagName: string) => {\n    if (tag) {\n      const ntag: ITag = { ...tag, tagName: tagName };\n      setTag(ntag);\n    }\n  };\n\n  const handleColorChange = (ncolor: string) => {\n    if (tag.tagColor) {\n      const ntag: ITag = { ...tag, tagColor: ncolor };\n      setTag(ntag);\n    }\n  };\n\n  useEffect(() => {\n    const label: HTMLLabelElement = document.getElementById(\n      \"color2\"\n    ) as HTMLLabelElement;\n    label.style.backgroundColor = tag.tagColor;\n  }, [tag.tagColor]);\n  return (\n    <>\n      <div className=\"task\">\n        <div\n          className={`taskSection small ${isOverflow ? \"overflow\" : \"\"}`}\n          ref={divRef}\n        >\n          <div className=\"inputs\">\n            <label htmlFor=\"tagname\">Tagname</label>\n            <input\n              type=\"text\"\n              id=\"tagname\"\n              name=\"tagname\"\n              value={tag.tagName}\n              onChange={(event: any) => handleInputChange(event.target.value)}\n              placeholder=\"TAGNAME...\"\n            />\n            <div className=\"colorWrapper\">\n              <label htmlFor=\"colorLabel\">Color</label>\n              <input\n                className=\"colorInput\"\n                type=\"text\"\n                id=\"colorLabel\"\n                name=\"colorLabel\"\n                value={tag.tagColor}\n                readOnly\n              />\n              <div className=\"colors colorInput\">\n                <input\n                  type=\"color\"\n                  name=\"colorTag2\"\n                  id=\"colorTag2\"\n                  value={tag.tagColor}\n                  onChange={(event: any) =>\n                    handleColorChange(event.target.value)\n                  }\n                />\n                <label htmlFor=\"colorTag2\" id=\"color2\"></label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <button\n          className=\"btn center delete\"\n          onClick={() => {\n            if (deleteEventHandler) {\n              deleteEventHandler(task);\n              setTimeout(() => closePopup(), 100);\n            }\n          }}\n        >\n          DELETE TAG\n        </button>\n        <button className=\"btn center\" onClick={editTag}>\n          EDIT TAG\n        </button>\n      </div>\n    </>\n  );\n};\nexport default ScreensEditTag;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport DroppableList from \"../../components/DroppableList\";\nimport Popup from \"../../components/Popup\";\nimport ScreensEditTag from \"./ScreensEditTag\";\nimport { ITag, ITask, ITodoColumn, ScreensType } from \"../../types\";\nimport { tagTasksState } from \"../../recoil/selectors\";\nimport { tagsState } from \"../../recoil/atoms\";\nimport * as utilities from \"../../utilities\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./index.css\";\nimport { saveTags } from \"../../api\";\n\nconst ScreensTags: React.FC<ScreensType> = ({ hidden }) => {\n  const [rerender, setRerender] = useState<boolean>(false);\n  const tagnameRef = useRef<HTMLInputElement>(null);\n  const [popup, setPopup] = useState<boolean>(false);\n  const [color, setColor] = useState<string>(\n    `hsl(${Math.floor(Math.random() * 255) + 1}, 50%, 75%)`\n  );\n  const [selectedTag, setSelectedTag] = useState<ITask>();\n  const tagTasks = useRecoilValue(tagTasksState);\n  const [columnId, setColumnId] = useState<string>(\"0\");\n  const [tags, setTags] = useRecoilState(tagsState);\n  const dateRef = useRef(new Date());\n\n  useEffect(() => {\n    if (!hidden) setRerender(true);\n    else setRerender(false);\n  }, [hidden]);\n\n  useEffect(() => {\n    saveTags(tags);\n  }, [tags]);\n\n  useEffect(() => {\n    const label: HTMLLabelElement = document.getElementById(\n      \"color\"\n    ) as HTMLLabelElement;\n    label.style.backgroundColor = color;\n  }, [color]);\n\n  const selectTagHandler = (task: ITask, columnId: string) => {\n    setPopup(true);\n    setSelectedTag(task);\n    setColumnId(columnId);\n  };\n  const deleteEventHandler = (tag: ITask) => {\n    // TODO: Add delete animation :)\n    const ntags = tags.filter((t: ITag) => t.id !== tag.id);\n    setTags(ntags);\n  };\n\n  const addTag = () => {\n    const tagName = tagnameRef?.current?.value;\n    const tagColor = color;\n    if (tagName) {\n      const tagId = uuidv4();\n      const tag: ITag = { id: tagId, tagName: tagName, tagColor: tagColor };\n      setTags([...tags, tag]);\n      if (tagnameRef?.current?.value) tagnameRef.current.value = \"\";\n      // Generate new color\n      setColor(`hsl(${Math.floor(Math.random() * 255) + 1}, 50%, 75%)`);\n    }\n  };\n\n  const handleColorChange = (ncolor: string) => {\n    if (color) setColor(ncolor);\n  };\n  return (\n    <>\n      <div className=\"tags simpleScreen\" hidden={hidden}>\n        <div className=\"topBackground topSimple\">\n          <div className=\"title\">\n            <svg\n              width=\"18\"\n              height=\"16\"\n              viewBox=\"0 0 16 14\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M7.50061 2.08579L13.5006 8.08579V12.2928C13.5006 12.6906 13.3426 13.0721 13.0613 13.3534C12.78 13.6348 12.3984 13.7928 12.0006 13.7928H3.00061C2.60279 13.7928 2.22125 13.6348 1.93995 13.3534C1.65865 13.0721 1.50061 12.6906 1.50061 12.2928V8.08579L7.50061 2.08579ZM12.5006 1.29279V4.79279L10.5006 2.79279V1.29279C10.5006 1.16018 10.5533 1.033 10.6471 0.939232C10.7408 0.845464 10.868 0.792786 11.0006 0.792786H12.0006C12.1332 0.792786 12.2604 0.845464 12.3542 0.939232C12.4479 1.033 12.5006 1.16018 12.5006 1.29279Z\"\n                fill=\"white\"\n              />\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M6.79363 0.292786C6.98116 0.105315 7.23547 0 7.50063 0C7.7658 0 8.0201 0.105315 8.20763 0.292786L14.8546 6.93879C14.9485 7.03267 15.0013 7.16001 15.0013 7.29279C15.0013 7.42556 14.9485 7.5529 14.8546 7.64679C14.7607 7.74067 14.6334 7.79342 14.5006 7.79342C14.3679 7.79342 14.2405 7.74067 14.1466 7.64679L7.50063 0.999786L0.854632 7.64679C0.760745 7.74067 0.633407 7.79342 0.500632 7.79342C0.367856 7.79342 0.240518 7.74067 0.146632 7.64679C0.052745 7.5529 0 7.42556 0 7.29279C0 7.16001 0.052745 7.03267 0.146632 6.93879L6.79363 0.292786Z\"\n                fill=\"white\"\n              />\n            </svg>\n            <h1>Tags</h1>\n          </div>\n          <h2>today's date</h2>\n          <p>{utilities.prettyDate(dateRef.current)}</p>\n        </div>\n        <div className=\"newTagBox\">\n          <div className=\"inputs\">\n            <label htmlFor=\"newTag\">Tagname</label>\n            <input\n              type=\"text\"\n              name=\"newTag\"\n              id=\"newTag\"\n              ref={tagnameRef}\n              placeholder=\"ADD NEW TAG...\"\n            />\n          </div>\n          <div className=\"colors\">\n            <input\n              type=\"color\"\n              name=\"colorTag\"\n              id=\"colorTag\"\n              value={color}\n              onChange={(event: any) => handleColorChange(event.target.value)}\n            />\n            <label htmlFor=\"colorTag\" id=\"color\"></label>\n            <button onClick={addTag}>ADD</button>\n          </div>\n        </div>\n        {tagTasks ? (\n          <DroppableList\n            rerender={rerender}\n            data={tagTasks.todoColumn}\n            setData={(_: ITodoColumn) => \"\"}\n            showTitle={false}\n            hasEmptyString={\"no tasks scheduled this day...\"}\n            showDeleteBtn={true}\n            deleteEventHandler={deleteEventHandler}\n            hasBigTag={true}\n            onClick={selectTagHandler}\n          />\n        ) : (\n          <></>\n        )}\n      </div>\n      <Popup\n        isFullscreen={true}\n        shown={popup}\n        closeEvent={() => {\n          setPopup(false);\n        }}\n        children={\n          <>\n            {popup && selectedTag ? (\n              <ScreensEditTag\n                task={selectedTag}\n                taskIds={tagTasks.taskIds[columnId]}\n                deleteEventHandler={deleteEventHandler}\n              />\n            ) : (\n              <></>\n            )}\n          </>\n        }\n        title=\"EDIT TAG\"\n      />\n    </>\n  );\n};\nexport default ScreensTags;\n","import React, { useEffect, useState } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport {\n  dailiesState,\n  tagsState,\n  tasksState,\n  themeState,\n} from \"../../recoil/atoms\";\nimport { ScreensType } from \"../../types\";\nimport Popup from \"../../components/Popup\";\nimport { loadDailies, loadTags, loadTasks } from \"../../api\";\nimport \"./index.css\";\n\nconst ScreensConfig: React.FC<ScreensType> = ({ hidden }) => {\n  const [darkmode, setDarkmode] = useState<boolean>(false);\n  const [popup, setPopup] = useState<boolean>(false);\n  const setDailies = useSetRecoilState(dailiesState);\n  const setTasks = useSetRecoilState(tasksState);\n  const setTags = useSetRecoilState(tagsState);\n  const setTheme = useSetRecoilState(themeState);\n  const handleInputChange = (\n    setState: (state: boolean) => void,\n    state: boolean\n  ) => {\n    setState(state);\n  };\n  useEffect(() => {\n    if (darkmode) setTheme(\"dark\");\n    else setTheme(\"light\");\n  }, [darkmode, setTheme]);\n  return (\n    <div className=\"config\" hidden={hidden}>\n      <div className=\"inputWrapper\">\n        <input\n          type=\"checkbox\"\n          name=\"darkmode\"\n          id=\"darkmode\"\n          checked={darkmode}\n          onChange={(event: any) =>\n            handleInputChange(setDarkmode, event.target.checked)\n          }\n        />\n        <label htmlFor=\"darkmode\">dark mode</label>\n      </div>\n      <div className=\"inputWrapper\">\n        <input\n          type=\"checkbox\"\n          name=\"other\"\n          id=\"other\"\n          checked={darkmode}\n          onChange={(event: any) =>\n            handleInputChange(setDarkmode, event.target.checked)\n          }\n        />\n        <label htmlFor=\"other\">some other stuff</label>\n      </div>\n      <button className=\"btn\" onClick={() => setPopup(true)}>\n        CLEAR DATA\n      </button>\n      <Popup\n        isFullscreen={false}\n        shown={popup}\n        children={\n          popup ? (\n            <div className=\"popupWrapper center\">\n              <h1 className=\"title\">R YOU SURE?</h1>\n              <p>Action: CLEAR DATA</p>\n              <button className=\"btn delete\" onClick={() => setPopup(false)}>\n                NO\n              </button>\n              <button\n                className=\"btn\"\n                onClick={() => {\n                  localStorage.removeItem(\"djukip-tasks\");\n                  localStorage.removeItem(\"djukip-tags\");\n                  localStorage.removeItem(\"djukip-dailies\");\n                  setTags(loadTags());\n                  setTasks(loadTasks());\n                  setDailies(loadDailies());\n                  setPopup(false);\n                }}\n              >\n                YES\n              </button>\n            </div>\n          ) : (\n            <></>\n          )\n        }\n        closeEvent={() => \"\"}\n      />\n    </div>\n  );\n};\nexport default ScreensConfig;\n","import React, { useEffect } from \"react\";\nimport \"./index.css\";\n\ntype TransitionType = {\n  shown: boolean;\n  setShown: (shown: boolean) => void;\n};\nconst Transition: React.FC<TransitionType> = ({ shown, setShown }) => {\n  useEffect(() => {\n    if (shown) {\n      const timer = setTimeout(() => setShown(false), 800);\n      return () => clearTimeout(timer);\n    }\n  }, [shown, setShown]);\n  return (\n    <div className={`transitionWrapper ${!shown ? \"hidden\" : \"\"}`}>\n      <div className=\"circle\"></div>\n    </div>\n  );\n};\nexport default Transition;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { RecoilRoot } from \"recoil\";\nimport Footer from \"./components/Footer\";\nimport Popup from \"./components/Popup\";\nimport ScreensHome from \"./screens/Home\";\nimport ScreensDailies from \"./screens/Dailies\";\nimport ScreensTags from \"./screens/Tags\";\nimport ScreensConfig from \"./screens/Config\";\nimport { ScreensAddTask } from \"./screens/Task\";\nimport Transition from \"./components/Transition\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [selected, setSelected] = useState<number>(0);\n  const [popup, setPopup] = useState<boolean>(false);\n  const [transition, setTransition] = useState<boolean>(false);\n  const [popupScreen, setPopupScreen] = useState<number>(0);\n  const transitionRef = useRef<boolean>(false);\n  const selectedOldRef = useRef<number>(selected);\n\n  const popupScreenTitles = (num: number) => {\n    switch (num) {\n      case 0:\n        return \"Configuration\";\n      case 1:\n        return \"Add new task\";\n      case 2:\n        return \"Edit task\";\n      default:\n        return \"\";\n    }\n  };\n  const openPopupScreen = (num: number) => {\n    setPopupScreen(num);\n    setPopup(true);\n    transitionRef.current = false;\n  };\n  useEffect(() => {\n    if (selected === 3) {\n      openPopupScreen(0);\n    } else if (selectedOldRef.current !== 3) {\n      setTransition(true);\n    } else {\n      transitionRef.current = true;\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (selectedOldRef.current === 3) transitionRef.current = false;\n    else if (!transition) {\n      transitionRef.current = true;\n    } else transitionRef.current = false;\n  }, [transition]);\n\n  const setSelectedHandler = (num: number) => {\n    selectedOldRef.current = selected;\n    setSelected(num);\n    transitionRef.current = true;\n  };\n  const hiddenScreen = (num: number) => {\n    if (selected === 3) {\n      return !(selectedOldRef.current === num);\n    } else if (selected !== num || transitionRef.current) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <RecoilRoot>\n      <div className=\"App\">\n        <Transition shown={transition} setShown={setTransition} />\n        <ScreensHome hidden={hiddenScreen(0)} />\n        <ScreensDailies hidden={hiddenScreen(1)} />\n        <ScreensTags hidden={hiddenScreen(2)} />\n        <Popup\n          isFullscreen={true}\n          shown={popup}\n          closeEvent={() => {\n            if (selected === 3) setSelectedHandler(selectedOldRef.current);\n            setPopup(false);\n            transitionRef.current = false;\n          }}\n          children={\n            <>\n              <ScreensConfig\n                hidden={!popup || selected !== 3 || popupScreen !== 0}\n              />\n              {popup && popupScreen === 1 ? <ScreensAddTask /> : <></>}\n            </>\n          }\n          title={popupScreenTitles(popupScreen)}\n        />\n        <Footer\n          selected={selected}\n          setSelected={setSelectedHandler}\n          setPopupScreen={openPopupScreen}\n        />\n      </div>\n    </RecoilRoot>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}